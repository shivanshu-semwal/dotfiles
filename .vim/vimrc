set nocompatible

filetype plugin indent on  " Load plugins according to detected filetype.
syntax on                  " Enable syntax highlighting.

set autoindent             " Indent according to previous line.
set softtabstop =4         " Tab key indents by 4 spaces.
set shiftwidth  =4         " >> indents by 4 spaces.
set shiftround             " >> indents to next multiple of 'shiftwidth'.
set expandtab              " Use spaces instead of tabs.

set backspace   =indent,eol,start  " Make backspace work as you would expect.
set hidden                 " Switch between buffers without having to save first.
set laststatus  =2         " Always show statusline.
set display     =lastline  " Show as much as possible of the last line.

set showmode               " Show current mode in command-line.
set showcmd                " Show already typed keys when more are expected.

set incsearch              " Highlight while searching with / or ?.
set hlsearch               " Keep matches highlighted.

set ttyfast                " Faster redrawing.
set lazyredraw             " Only redraw when necessary.

set splitbelow             " Open new windows below the current window.
set splitright             " Open new windows right of the current window.

set cursorline             " Find the current line quickly.
set wrapscan               " Searches wrap around end-of-file.
set report      =0         " Always report changed lines.
set synmaxcol   =200       " Only highlight the first 200 columns.

set number                 " show line numbers
"set relativenumber        "show relative line numbers

set noerrorbells visualbell t_vb=     "remove annoying alert sounds
set backspace=indent,eol,start        "make backspace behave more resonably
set shortmess+=I                      "disable vim startup message

set list                   " Show non-printable characters.
if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
endif

" The fish shell is not very compatible to other shells and unexpectedly
" breaks things that use 'shell'.
if &shell =~# 'fish$'
  set shell=/bin/bash
endif

" Put all temporary files under the same directory.
" https://github.com/mhinz/vim-galore#temporary-files
" set backup
set backupdir   =$HOME/.vim/files/backup/
set backupext   =-vimbackup
set backupskip  =
" set directory   =$HOME/.vim/files/swap//
set updatecount =10
set undofile
set undodir     =$HOME/.vim/files/undo/
" set viminfo     ='100,n$HOME/.vim/files/info/viminfo
set viminfo+=n~/.vim/viminfo

:set mouse=a    "enable mouse support in vim

" PLUGINS BEGIN
call plug#begin('~/.vim/plugged')

" Plug 'joshdick/onedark.vim'
Plug 'morhetz/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'ryanoasis/vim-devicons'
Plug 'sheerun/vim-polyglot'
Plug 'preservim/nerdtree'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()

" PLUGINS SETTINGS
"
" airline plugin
let g:airline_theme='gruvbox'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" let g:onedark_terminal_italics = 1
" colorscheme
" if (has("autocmd") && !has("gui_running"))
"   augroup colorset
"     autocmd!
"     let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
"     autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white }) " `bg` will not be styled since there is no `bg` setting
"   augroup END
" endif
" if (has("autocmd") && has("gui_running"))
"   augroup colorset
"     autocmd!
"     let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }
"     let s:background = { "gui": "#1e2127", "cterm": "235", "cterm16": "NONE" }
"     autocmd ColorScheme * call onedark#set_highlight("Normal", { "fg": s:white, "bg": s:background }) " `bg` will not be styled since there is no `bg` setting
"   augroup END
" endif

set bg=dark
let g:gruvbox_contrast_dark = 'hard'
colorscheme gruvbox 

if exists('+termguicolors')
  let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
hi Normal ctermbg=NONE

" gvim settings
set guifont=Iosevka\ Nerd\ Font\ Mono\ 16
set guioptions-=T
set guioptions-=m
set guioptions-=l             "remove scrollbar
set guioptions-=r             "remove right scroll bar
set guioptions-=L             "remove scrollbar in vertical split
set guicursor+=a:blinkon0 "stop cursor blinking in gvim

function! FontSizePlus ()
  let l:gf_size_whole = matchstr(&guifont, '\( \)\@<=\d\+$')
  let l:gf_size_whole = l:gf_size_whole + 1
  let l:new_font_size = ' '.l:gf_size_whole
  let &guifont = substitute(&guifont, ' \d\+$', l:new_font_size, '')
endfunction

function! FontSizeMinus ()
  let l:gf_size_whole = matchstr(&guifont, '\( \)\@<=\d\+$')
  let l:gf_size_whole = l:gf_size_whole - 1
  let l:new_font_size = ' '.l:gf_size_whole
  let &guifont = substitute(&guifont, ' \d\+$', l:new_font_size, '')
endfunction

if has("gui_running")
  nmap <S-F12> :call FontSizeMinus()<CR>
  nmap <F12> :call FontSizePlus()<CR>
endif

" override plugins settings
set ttimeoutlen=50

" cursor
if empty($TMUX)
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
else
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
endif

" use double-Esc to completely clear the search buffer
nnoremap <silent> <Esc><Esc> :let @/ = ""<CR>
" use space to retain the search buffer and toggle highlighting off/on
nnoremap <silent> <Space> :set hlsearch!<CR>

" pandoc
augroup my_markdown
    autocmd!
    autocmd FileType markdown nnoremap <buffer><nowait><silent> <F5> :<c-u>silent call system('pandoc '.expand('%:p:S').' -o '.expand('%:p:r:S').'.pdf')<cr>
augroup END

nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
" nnoremap <C-f> :NERDTreeFind<CR>

nnoremap <C-f> :Buffers<CR>

" spelling 
set spell spelllang=en_us

map <Enter> o<ESC>
map <S-Enter> O<ESC>

