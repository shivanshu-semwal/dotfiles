#!/usr/bin/env bash

# Use: Change the vloume of system for active sink (for pulseaudio)
# Dependencies: pactl, dunstify
# Description: Changes the volume of the active sink, gives notification using dunstify
#   Bind this to your function keys to change voume
# Working: pactl is used to get default sink and it's voulme using some text-fu
# Author: Shivanshu

# Saves the currently default sink into a variable named `curSink`. It will
# return an error code when pulseaudio isn't running.
function getCurSink() {
    if ! pactl info &>/dev/null; then return 1; fi
    local curSinkName

    curSinkName=$(pactl info | awk '/Default Sink: / {print $3}')
    curSink=$(pactl list sinks | grep -B 4 -E "Name: $curSinkName\$" | sed -nE 's/^Sink #([0-9]+)$/\1/p')
}

# Saves the sink passed by parameter's volume into a variable named `VOL_LEVEL`.
function getCurVol() {
    VOL_LEVEL=$(pactl list sinks | grep -A 15 -E "^Sink #$1\$" | grep 'Volume:' | grep -E -v 'Base Volume:' | awk -F : '{print $3; exit}' | grep -o -P '.{0,3}%' | sed 's/.$//' | tr -d ' ')
}

# Saves the status of the sink passed by parameter into a variable named `isMuted`.
function getIsMuted() {
    isMuted=$(pactl list sinks | grep -E "^Sink #$1\$" -A 15 | awk '/Mute: / {print $2}')
}

# main working

if ! pulseaudio --check; then
    echo "Puseaudio Inactive"
    exit
fi

if ! getCurSink; then
    echo "PulseAudio not running"
    return 1
fi
getCurVol "$curSink"
getIsMuted "$curSink"

MUTE="$isMuted"
VOL="$VOL_LEVEL"

case "$1" in
-inc)
    if [ "$MUTE" = "yes" ]; then
        pactl set-sink-mute @DEFAULT_SINK@ toggle
    fi
    if [ "$VOL" -lt 130 ]; then
        pactl set-sink-volume @DEFAULT_SINK@ +1%
        ((NEWVOL = $VOL + 1))
        dunstify -a "Volume" "Volume" "Increase \nVolume: " -h int:value:$NEWVOL -i audio-volume-high -r 100
    fi
    ;;
-dec)
    if [ "$MUTE" = "yes" ]; then
        pactl set-sink-mute @DEFAULT_SINK@ toggle
    fi
    pactl set-sink-volume @DEFAULT_SINK@ -1%
    ((NEWVOL = $VOL + 1))
    dunstify -a "Volume" "Volume" "Decrease \nVolume: " -h int:value:$NEWVOL -r 100 -i audio-volume-medium
    ;;
-mute)
    if [ "$MUTE" = "yes" ]; then
        pactl set-sink-mute @DEFAULT_SINK@ toggle
        dunstify -a "Volume" "Volume" "Unmute \nVolume" -h int:value:$VOL -r 100 -i audio-on
    else
        pactl set-sink-mute @DEFAULT_SINK@ toggle
        dunstify -a "Volume" "Volume" "Mute \nVolume" -r 100 -i audio-off
    fi
    ;;
*)
    exit 1
    ;;
esac
